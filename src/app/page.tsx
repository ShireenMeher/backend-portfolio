"use client";

import React from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import {
  Github,
  Linkedin,
  Mail,
  Database,
  Cloud,
  Server,
  GitBranch,
  ArrowUpRight,
  Gauge,
  Layers,
} from "lucide-react";

// Use RELATIVE imports to match your folder layout
// Ensure the correct path to the Button component
import { Button } from "../components/ui/button";
import { Badge } from "../components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "../components/ui/tabs";
// If you have dialog component generated by shadcn:
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "../components/ui/dialog";

// ---- Edit these objects for your info ----
const PROFILE = {
  name: "Shireen Meher",
  role: "Backend & Distributed Systems Engineer",
  blurb:
    "I design resilient backends: search, graphs, and cloud-native data platforms. Neo4j/OpenSearch/AWS/K8s.",
  location: "Amherst, MA",
  links: {
    github: "https://github.com/your-handle",
    linkedin: "https://www.linkedin.com/in/your-handle",
    email: "mailto:you@example.com",
    resume: "/resume.pdf",
  },
  skills: [
    "Go",
    "Java",
    "Python",
    "Node.js",
    "PostgreSQL",
    "MongoDB",
    "Neo4j",
    "OpenSearch/Elasticsearch",
    "Redis",
    "Kafka",
    "AWS (Lambda, SQS, SNS, S3, Glue)",
    "Docker",
    "Kubernetes",
    "gRPC",
    "REST/OpenAPI",
    "CI/CD",
    "Observability",
  ],
};

type Project = {
  title: string;
  period: string;
  summary: string;
  highlights: string[];
  metrics: { label: string; value: string }[];
  stack: string[];
  tags: string[];
  links?: { repo?: string; demo?: string };
  caseStudy?: {
    problem: string;
    solution: string;
    design: string;
    results: string;
  };
};

const PROJECTS: Project[] = [
  {
    title: "Vendor Discovery · Graph + Vector Search",
    period: "2023",
    summary:
      "Hybrid Neo4j vector search + OpenSearch full-text; big boost to industrial vendor search relevance.",
    highlights: [
      "Neo4j embeddings + rank fusion",
      "AWS Lambda + SQS async pipeline",
      "Domain analyzers and custom scoring",
    ],
    metrics: [
      { label: "Relevance", value: "↑ 60–70%" },
      { label: "P99 Latency", value: "↓ 45%" },
      { label: "Docs", value: ">10M" },
    ],
    stack: ["Neo4j", "OpenSearch", "Python", "AWS", "Flask"],
    tags: ["Search", "Graphs", "Distributed"],
    caseStudy: {
      problem:
        "Low recall/precision on industry terms due to sparse metadata and varied terminology.",
      solution:
        "Dual-index: embeddings in Neo4j for semantic recall + OpenSearch for keyword precision with rank fusion.",
      design:
        "Event-driven ingestion → embedding service → Neo4j; analyzers/dictionaries in OpenSearch; fusion/rerank.",
      results:
        "Substantial relevance lift and faster tail latencies with observability dashboards.",
    },
  },
  {
    title: "Payments Terminal · Rule-Based Method Enablement",
    period: "2022",
    summary:
      "Automated merchant payment-method activation via DB events + rules engine; ops workload dropped sharply.",
    highlights: [
      "Custom rule engine, idempotent transitions",
      "Outbox/event-sourcing",
      "Dual-writes sunset with zero downtime",
    ],
    metrics: [
      { label: "Support Tickets", value: "↓ 35%" },
      { label: "Throughput", value: "5% of India txns" },
      { label: "Latency", value: "P99 −50%" },
    ],
    stack: ["Go", "Laravel", "MySQL", "Kafka", "Docker"],
    tags: ["Transactions", "APIs"],
    caseStudy: {
      problem: "Manual enablement caused delays and inconsistencies.",
      solution:
        "Database-event driven rules evaluated merchant attributes and auto-enabled methods with audit trails.",
      design:
        "Outbox → rule-engine → config service; SLO-based alerts; safe migrations.",
      results: "Faster activation + measurable reliability improvements.",
    },
  },
  {
    title: "S3 Orphan Data Cleanup · Glue Governance",
    period: "2024",
    summary:
      "Automated detection of non-indexed S3 data via Glue snapshots & set-ops orchestrated by Step Functions.",
    highlights: ["S3 Inventory + Glue delta", "Guardrails + ticketing", "CI checks"],
    metrics: [
      { label: "Recovery", value: "↑ discoverability" },
      { label: "Costs", value: "↓ storage waste" },
      { label: "Safety", value: "Policy guardrails" },
    ],
    stack: ["AWS Glue", "S3", "Step Functions", "EMR", "Python"],
    tags: ["Data", "Governance"],
    caseStudy: {
      problem: "Unindexed data accumulating in S3, driving cost & risk.",
      solution:
        "Periodic snapshot & set-op diffing to mark orphan paths; manual review gates for deletes.",
      design:
        "Orchestrated pipeline: Inventory → Glue tables → diff → ticket → action with CloudTrail hooks.",
      results: "Reduced waste and better catalog hygiene.",
    },
  },
];

// ---- Small animation helpers ----
const fadeUp = {
  initial: { opacity: 0, y: 12 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.6, ease: "easeInOut" },
};
const springy = { type: "spring" as const, stiffness: 260, damping: 22 };

export default function Page() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted/40">
      <main className="mx-auto max-w-6xl px-5 py-14 md:py-20">
        <Hero />
        <Metrics />
        <Skills />
        <Projects />
        <Footer />
      </main>
    </div>
  );
}

function Hero() {
  return (
    <section className="grid items-center gap-8 md:grid-cols-[1.25fr,1fr] md:gap-12">
      <div>
        <motion.h1
          {...fadeUp}
          className="text-4xl font-bold tracking-tight md:text-5xl"
        >
          {PROFILE.name}
        </motion.h1>
        <motion.p
          {...fadeUp}
          transition={{ ...fadeUp.transition, delay: 0.05, ease: [0.42, 0, 0.58, 1] as Easing }}
          className="mt-2 text-lg text-muted-foreground"
        >
          {PROFILE.role}
        </motion.p>

        <motion.p
          {...fadeUp}
          transition={{ ...fadeUp.transition, delay: 0.1, ease: [0.42, 0, 0.58, 1] }}
          className="mt-4 max-w-2xl text-base leading-relaxed"
        >
          {PROFILE.blurb}
        </motion.p>

        <motion.div
          {...fadeUp}
          transition={{ ...fadeUp.transition, delay: 0.15, ease: [0.42, 0, 0.58, 1] }}
          className="mt-6 flex flex-wrap gap-3"
        >
          <Button asChild>
            <a href={PROFILE.links.resume} target="_blank" rel="noreferrer">
              Download Resume <ArrowUpRight />
            </a>
          </Button>
          <Button variant="outline" asChild>
            <a href={PROFILE.links.github} target="_blank" rel="noreferrer">
              <Github /> GitHub
            </a>
          </Button>
          <Button variant="outline" asChild>
            <a href={PROFILE.links.linkedin} target="_blank" rel="noreferrer">
              <Linkedin /> LinkedIn
            </a>
          </Button>
          <Button variant="ghost" asChild>
            <a href={PROFILE.links.email}>
              <Mail /> Contact
            </a>
          </Button>
        </motion.div>
      </div>

      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={springy}
        className="relative mx-auto h-48 w-48 overflow-hidden rounded-2xl border bg-gradient-to-br from-primary/10 to-primary/20 md:h-60 md:w-60"
      >
        {/* Replace with your avatar or an architecture diagram */}
        <div className="absolute inset-0 grid place-items-center">
          <Database className="size-10 opacity-70" />
          <Cloud className="size-8 opacity-50 absolute -top-2 right-4 animate-pulse" />
          <Server className="size-8 opacity-50 absolute bottom-3 left-4" />
          <GitBranch className="size-7 opacity-60 absolute top-10 left-8 rotate-12" />
        </div>
      </motion.div>
    </section>
  );
}

function Metrics() {
  const items = [
    { icon: Gauge, label: "P99 Latency", value: "−45–50%" },
    { icon: Layers, label: "Scale", value: "10M+ docs" },
    { icon: Server, label: "Throughput", value: "5% nation txns" },
  ];

  return (
    <section className="mt-10 grid gap-4 sm:grid-cols-3">
      {items.map(({ icon: Icon, label, value }, i) => (
        <motion.div
          key={label}
          initial={{ opacity: 0, y: 8 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, amount: 0.6 }}
          transition={{ duration: 0.5, delay: i * 0.05 }}
          className="rounded-xl border bg-card p-5 shadow-xs"
        >
          <div className="flex items-center gap-3">
            <div className="grid size-9 place-items-center rounded-lg bg-primary/10">
              <Icon className="size-5" />
            </div>
            <div>
              <p className="text-sm text-muted-foreground">{label}</p>
              <p className="text-lg font-semibold">{value}</p>
            </div>
          </div>
        </motion.div>
      ))}
    </section>
  );
}

function Skills() {
  return (
    <section className="mt-12">
      <Tabs defaultValue="skills" className="w-full">
        <TabsList>
          <TabsTrigger value="skills">Skills</TabsTrigger>
          <TabsTrigger value="about">About</TabsTrigger>
        </TabsList>
        <TabsContent value="skills" className="mt-4">
          <div className="flex flex-wrap gap-2">
            {PROFILE.skills.map((s, i) => (
              <motion.div
                key={s}
                initial={{ opacity: 0, y: 6 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.35, delay: i * 0.02 }}
              >
                <Badge variant="secondary">{s}</Badge>
              </motion.div>
            ))}
          </div>
        </TabsContent>
        <TabsContent value="about" className="mt-4">
          <p className="text-muted-foreground">
            Based in {PROFILE.location}. I care about reliability, tail
            latencies, and clean migrations. I like rank-fusion search and graph-
            enriched data models.
          </p>
        </TabsContent>
      </Tabs>
    </section>
  );
}

function Projects() {
  const [activeTag, setActiveTag] = React.useState<string>("All");
  const tags = ["All", ...Array.from(new Set(PROJECTS.flatMap((p) => p.tags)))];
  const filtered =
    activeTag === "All"
      ? PROJECTS
      : PROJECTS.filter((p) => p.tags.includes(activeTag));

  return (
    <section className="mt-12">
      <div className="flex items-center justify-between gap-3">
        <h2 className="text-2xl font-semibold tracking-tight">Projects</h2>
        <div className="flex flex-wrap gap-2">
          {tags.map((t) => (
            <Button
              key={t}
              size="sm"
              variant={activeTag === t ? "default" : "outline"}
              onClick={() => setActiveTag(t)}
            >
              {t}
            </Button>
          ))}
        </div>
      </div>

      <div className="mt-6 grid gap-5 sm:grid-cols-2">
        {filtered.map((p, i) => (
          <motion.article
            key={p.title}
            initial={{ opacity: 0, y: 10, scale: 0.98 }}
            whileInView={{ opacity: 1, y: 0, scale: 1 }}
            viewport={{ once: true, amount: 0.4 }}
            transition={{ duration: 0.5, delay: i * 0.03 }}
            className="group relative rounded-2xl border bg-card p-5 shadow-xs"
          >
            <div className="flex items-start justify-between gap-4">
              <div>
                <h3 className="text-lg font-semibold leading-tight">
                  {p.title}
                </h3>
                <p className="text-sm text-muted-foreground">{p.period}</p>
              </div>
              <div className="flex gap-2">
                {p.stack.slice(0, 3).map((s) => (
                  <Badge key={s} variant="outline">
                    {s}
                  </Badge>
                ))}
              </div>
            </div>

            <p className="mt-3 text-sm">{p.summary}</p>

            <ul className="mt-3 space-y-1 text-sm">
              {p.highlights.map((h) => (
                <li key={h} className="leading-relaxed">• {h}</li>
              ))}
            </ul>

            <div className="mt-4 flex flex-wrap gap-3">
              {p.metrics.map((m) => (
                <div
                  key={m.label}
                  className="rounded-lg border px-3 py-1.5 text-sm"
                >
                  <span className="text-muted-foreground">{m.label}:</span>{" "}
                  <span className="font-medium">{m.value}</span>
                </div>
              ))}
            </div>

            {p.caseStudy && (
              <div className="mt-5">
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="ghost">
                      Read case study <ArrowUpRight />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle>{p.title}</DialogTitle>
                    </DialogHeader>
                    <div className="mt-2 space-y-3 text-sm">
                      <p><strong>Problem:</strong> {p.caseStudy.problem}</p>
                      <p><strong>Solution:</strong> {p.caseStudy.solution}</p>
                      <p><strong>Design:</strong> {p.caseStudy.design}</p>
                      <p><strong>Results:</strong> {p.caseStudy.results}</p>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            )}
          </motion.article>
        ))}
      </div>
    </section>
  );
}

function Footer() {
  return (
    <footer className="mt-14 flex items-center justify-between border-t pt-6 text-sm text-muted-foreground">
      <span>© {new Date().getFullYear()} {PROFILE.name}</span>
      <span className="flex items-center gap-3">
        <a href={PROFILE.links.github} target="_blank" rel="noreferrer" className="hover:underline">
          GitHub
        </a>
        <a href={PROFILE.links.linkedin} target="_blank" rel="noreferrer" className="hover:underline">
          LinkedIn
        </a>
        <a href={PROFILE.links.email} className="hover:underline">
          Email
        </a>
      </span>
    </footer>
  );
}
